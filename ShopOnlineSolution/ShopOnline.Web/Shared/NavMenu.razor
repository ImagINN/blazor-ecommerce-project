@implements IDisposable 
@inject IShoppingCartService shoppingCartService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">&nbsp;BİNGÖL MOBİLYA</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="fas fa-home" aria-hidden="true"></span>&nbsp;Home
            </NavLink>
        </div>

        <ProductCategoriesNavMenu/>

        <div class="nav-item px-3 d-sm-none">
            <NavLink class="nav-link" href="ShoppingCart">
                <span class="fas fa-shopping-cart" aria-hidden="true"></span> Shopping Cart (<b>@shoppingCartItemCount</b>)
            </NavLink>
        </div>        
    </nav>
</div>

@code {

    // Private Variable
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private int shoppingCartItemCount = 0;

    // Private Method
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ShoppingCartChanged(int totalQty)
    {
        shoppingCartItemCount = totalQty;
        StateHasChanged();
    }

    // Protected Method
    protected override void OnInitialized()
    {
        shoppingCartService.OnShoppingCartChanged += ShoppingCartChanged;
    }

    void IDisposable.Dispose()
    {
        shoppingCartService.OnShoppingCartChanged -= ShoppingCartChanged;
    }
}
